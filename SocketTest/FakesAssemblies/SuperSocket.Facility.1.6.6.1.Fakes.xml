<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SuperSocket.Facility.1.6.6.1.Fakes</name>
    </assembly>
    <members>
        <member name="T:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer">
            <summary>SuperSocket.Facility.PolicyServer.FlashPolicyServer 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.#ctor(SuperSocket.Facility.PolicyServer.FlashPolicyServer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IActiveConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IAppServer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.ILoggerProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IRemoteCertificateValidator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.ISocketServerAccessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IStatusInfoSource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.ISystemEndPoint)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IWorkItem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IWorkItemBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IAppServer{SuperSocket.Facility.PolicyServer.PolicySession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IRawDataProcessor{SuperSocket.Facility.PolicyServer.PolicySession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IRequestHandler{SuperSocket.SocketBase.Protocol.BinaryRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(SuperSocket.SocketBase.IAppServer{SuperSocket.Facility.PolicyServer.PolicySession,SuperSocket.SocketBase.Protocol.BinaryRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.Constructor">
            <summary>设置 FlashPolicyServer.FlashPolicyServer() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.SetupPolicyResponseByteArray">
            <summary>设置 FlashPolicyServer.SetupPolicyResponse(Byte[] policyFileData) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimFlashPolicyServer.AllInstances.SetupPolicyResponseByteArray">
            <summary>设置 FlashPolicyServer.SetupPolicyResponse(Byte[] policyFileData) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer">
            <summary>SuperSocket.Facility.PolicyServer.PolicyServer 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.#ctor(SuperSocket.Facility.PolicyServer.PolicyServer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IActiveConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IAppServer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.ILoggerProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IRemoteCertificateValidator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.ISocketServerAccessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IStatusInfoSource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.ISystemEndPoint)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IWorkItem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IWorkItemBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IAppServer{SuperSocket.Facility.PolicyServer.PolicySession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IRawDataProcessor{SuperSocket.Facility.PolicyServer.PolicySession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IRequestHandler{SuperSocket.SocketBase.Protocol.BinaryRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(SuperSocket.SocketBase.IAppServer{SuperSocket.Facility.PolicyServer.PolicySession,SuperSocket.SocketBase.Protocol.BinaryRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.Constructor">
            <summary>设置 PolicyServer.PolicyServer() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.GetPolicyFileResponseIPEndPoint">
            <summary>设置 PolicyServer.GetPolicyFileResponse(IPEndPoint clientEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.PolicyResponseGet">
            <summary>设置 PolicyServer.get_PolicyResponse() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.PolicyResponseSetByteArray">
            <summary>设置 PolicyServer.set_PolicyResponse(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.PolicyServer_NewRequestReceivedPolicySessionBinaryRequestInfo">
            <summary>设置 PolicyServer.PolicyServer_NewRequestReceived(PolicySession session, BinaryRequestInfo requestInfo) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.ProcessRequestPolicySessionByteArray">
            <summary>设置 PolicyServer.ProcessRequest(PolicySession session, Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.SetupIRootConfigIServerConfig">
            <summary>设置 PolicyServer.Setup(IRootConfig rootConfig, IServerConfig config) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.SetupPolicyResponseByteArray">
            <summary>设置 PolicyServer.SetupPolicyResponse(Byte[] policyFileData) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.AllInstances.GetPolicyFileResponseIPEndPoint">
            <summary>设置 PolicyServer.GetPolicyFileResponse(IPEndPoint clientEndPoint) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.AllInstances.PolicyResponseGet">
            <summary>设置 PolicyServer.get_PolicyResponse() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.AllInstances.PolicyResponseSetByteArray">
            <summary>设置 PolicyServer.set_PolicyResponse(Byte[] value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.AllInstances.PolicyServer_NewRequestReceivedPolicySessionBinaryRequestInfo">
            <summary>设置 PolicyServer.PolicyServer_NewRequestReceived(PolicySession session, BinaryRequestInfo requestInfo) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.AllInstances.ProcessRequestPolicySessionByteArray">
            <summary>设置 PolicyServer.ProcessRequest(PolicySession session, Byte[] data) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.AllInstances.SetupIRootConfigIServerConfig">
            <summary>设置 PolicyServer.Setup(IRootConfig rootConfig, IServerConfig config) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicyServer.AllInstances.SetupPolicyResponseByteArray">
            <summary>设置 PolicyServer.SetupPolicyResponse(Byte[] policyFileData) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession">
            <summary>SuperSocket.Facility.PolicyServer.PolicySession 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.#ctor(SuperSocket.Facility.PolicyServer.PolicySession)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.Bind(SuperSocket.SocketBase.IAppSession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.Bind(SuperSocket.SocketBase.ISessionBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.Bind(SuperSocket.SocketBase.IAppSession{SuperSocket.Facility.PolicyServer.PolicySession,SuperSocket.SocketBase.Protocol.BinaryRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.Constructor">
            <summary>设置 PolicySession.PolicySession() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.PolicyServer.Fakes.ShimPolicySession.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer">
            <summary>SuperSocket.Facility.PolicyServer.SilverlightPolicyServer 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.#ctor(SuperSocket.Facility.PolicyServer.SilverlightPolicyServer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IActiveConnector)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IAppServer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.ILoggerProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IRemoteCertificateValidator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.ISocketServerAccessor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IStatusInfoSource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.ISystemEndPoint)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IWorkItem)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IWorkItemBase)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IAppServer{SuperSocket.Facility.PolicyServer.PolicySession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IRawDataProcessor{SuperSocket.Facility.PolicyServer.PolicySession})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IRequestHandler{SuperSocket.SocketBase.Protocol.BinaryRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(SuperSocket.SocketBase.IAppServer{SuperSocket.Facility.PolicyServer.PolicySession,SuperSocket.SocketBase.Protocol.BinaryRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.Constructor">
            <summary>设置 SilverlightPolicyServer.SilverlightPolicyServer() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.ProcessRequestPolicySessionByteArray">
            <summary>设置 SilverlightPolicyServer.ProcessRequest(PolicySession session, Byte[] data) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.ShimSilverlightPolicyServer.AllInstances.ProcessRequestPolicySessionByteArray">
            <summary>设置 SilverlightPolicyServer.ProcessRequest(PolicySession session, Byte[] data) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession">
            <summary>SuperSocket.Facility.PolicyServer.PolicySession 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.Close">
            <summary>设置 AppSession`2.Close() 的 存根</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.Close(SuperSocket.SocketBase.CloseReason)">
            <summary>设置 AppSession`2.Close(CloseReason reason) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.Close01">
            <summary>设置 AppSession`2.Close() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.CloseCloseReason">
            <summary>设置 AppSession`2.Close(CloseReason reason) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.GetMaxRequestLength">
            <summary>设置 AppSession`2.GetMaxRequestLength() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.GetMaxRequestLength01">
            <summary>设置 AppSession`2.GetMaxRequestLength() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.HandleException(System.Exception)">
            <summary>设置 AppSession`2.HandleException(Exception e) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.HandleExceptionException">
            <summary>设置 AppSession`2.HandleException(Exception e) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.HandleUnknownRequest(SuperSocket.SocketBase.Protocol.BinaryRequestInfo)">
            <summary>设置 AppSession`2.HandleUnknownRequest(!1 requestInfo) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.HandleUnknownRequestBinaryRequestInfo">
            <summary>设置 AppSession`2.HandleUnknownRequest(!1 requestInfo) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.Initialize(SuperSocket.SocketBase.IAppServer{SuperSocket.Facility.PolicyServer.PolicySession,SuperSocket.SocketBase.Protocol.BinaryRequestInfo},SuperSocket.SocketBase.ISocketSession)">
            <summary>设置 AppSession`2.Initialize(IAppServer`2&lt;!0,!1&gt; appServer, ISocketSession socketSession) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.InitializeIAppServerOfPolicySessionBinaryRequestInfoISocketSession">
            <summary>设置 AppSession`2.Initialize(IAppServer`2&lt;!0,!1&gt; appServer, ISocketSession socketSession) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.InitializeStub">
            <summary>初始化 type StubPolicySession 的新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.OnInit">
            <summary>设置 AppSession`2.OnInit() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.OnInit01">
            <summary>设置 AppSession`2.OnInit() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.OnSessionClosed(SuperSocket.SocketBase.CloseReason)">
            <summary>设置 AppSession`2.OnSessionClosed(CloseReason reason) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.OnSessionClosedCloseReason">
            <summary>设置 AppSession`2.OnSessionClosed(CloseReason reason) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.OnSessionStarted">
            <summary>设置 AppSession`2.OnSessionStarted() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.OnSessionStarted01">
            <summary>设置 AppSession`2.OnSessionStarted() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.Send(System.ArraySegment{System.Byte})">
            <summary>设置 AppSession`2.Send(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.Send(System.String)">
            <summary>设置 AppSession`2.Send(String message) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 AppSession`2.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.Send(System.String,System.Object[])">
            <summary>设置 AppSession`2.Send(String message, Object[] paramValues) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 AppSession`2.Send(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.SendArraySegmentOfByte">
            <summary>设置 AppSession`2.Send(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.SendByteArrayInt32Int32">
            <summary>设置 AppSession`2.Send(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.SendIListOfArraySegmentOfByte">
            <summary>设置 AppSession`2.Send(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.SendString">
            <summary>设置 AppSession`2.Send(String message) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.SendStringObjectArray">
            <summary>设置 AppSession`2.Send(String message, Object[] paramValues) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.TrySend(System.String)">
            <summary>设置 AppSession`2.TrySend(String message) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.TrySend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>设置 AppSession`2.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.TrySend(System.ArraySegment{System.Byte})">
            <summary>设置 AppSession`2.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 存根</summary>
        </member>
        <member name="M:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.TrySend(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 AppSession`2.TrySend(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.TrySendArraySegmentOfByte">
            <summary>设置 AppSession`2.TrySend(ArraySegment`1&lt;Byte&gt; segment) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.TrySendByteArrayInt32Int32">
            <summary>设置 AppSession`2.TrySend(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.TrySendIListOfArraySegmentOfByte">
            <summary>设置 AppSession`2.TrySend(IList`1&lt;ArraySegment`1&lt;Byte&gt;&gt; segments) 的 stub</summary>
        </member>
        <member name="F:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.TrySendString">
            <summary>设置 AppSession`2.TrySend(String message) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.PolicyServer.Fakes.StubPolicySession.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1">
            <summary>SuperSocket.Facility.Protocol.BeginEndMarkReceiveFilter`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.#ctor(SuperSocket.Facility.Protocol.BeginEndMarkReceiveFilter{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilter{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.ConstructorByteArrayByteArray">
            <summary>设置 BeginEndMarkReceiveFilter`1.BeginEndMarkReceiveFilter`1(Byte[] beginMark, Byte[] endMark) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 BeginEndMarkReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.Reset">
            <summary>设置 BeginEndMarkReceiveFilter`1.Reset() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.AllInstances.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 BeginEndMarkReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimBeginEndMarkReceiveFilter`1.AllInstances.Reset">
            <summary>设置 BeginEndMarkReceiveFilter`1.Reset() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilter 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.#ctor(SuperSocket.Facility.Protocol.CountSpliterReceiveFilter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.Bind(SuperSocket.SocketBase.Protocol.IOffsetAdapter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilter{SuperSocket.SocketBase.Protocol.StringRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.ConstructorByteInt32">
            <summary>设置 CountSpliterReceiveFilter.CountSpliterReceiveFilter(Byte spliter, Int32 spliterCount) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.ConstructorByteInt32Encoding">
            <summary>设置 CountSpliterReceiveFilter.CountSpliterReceiveFilter(Byte spliter, Int32 spliterCount, Encoding encoding) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.ConstructorByteInt32EncodingInt32">
            <summary>设置 CountSpliterReceiveFilter.CountSpliterReceiveFilter(Byte spliter, Int32 spliterCount, Encoding encoding, Int32 keyIndex) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.ProcessMatchedRequestByteArrayInt32Int32">
            <summary>设置 CountSpliterReceiveFilter.ProcessMatchedRequest(Byte[] readBuffer, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter.AllInstances.ProcessMatchedRequestByteArrayInt32Int32">
            <summary>设置 CountSpliterReceiveFilter.ProcessMatchedRequest(Byte[] readBuffer, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilter`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.#ctor(SuperSocket.Facility.Protocol.CountSpliterReceiveFilter{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.Bind(SuperSocket.SocketBase.Protocol.IOffsetAdapter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilter{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.ConstructorByteInt32">
            <summary>设置 CountSpliterReceiveFilter`1.CountSpliterReceiveFilter`1(Byte spliter, Int32 spliterCount) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 CountSpliterReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.InternalReset">
            <summary>设置 CountSpliterReceiveFilter`1.InternalReset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.LeftBufferSizeGet">
            <summary>设置 CountSpliterReceiveFilter`1.get_LeftBufferSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.NextReceiveFilterGet">
            <summary>设置 CountSpliterReceiveFilter`1.get_NextReceiveFilter() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.OffsetDeltaGet">
            <summary>设置 CountSpliterReceiveFilter`1.get_OffsetDelta() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.OffsetDeltaSetInt32">
            <summary>设置 CountSpliterReceiveFilter`1.set_OffsetDelta(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.Reset">
            <summary>设置 CountSpliterReceiveFilter`1.Reset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.StateGet">
            <summary>设置 CountSpliterReceiveFilter`1.get_State() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.StateSetFilterState">
            <summary>设置 CountSpliterReceiveFilter`1.set_State(FilterState value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.StaticConstructor">
            <summary>设置 CountSpliterReceiveFilter`1.CountSpliterReceiveFilter`1() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 CountSpliterReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances.InternalReset">
            <summary>设置 CountSpliterReceiveFilter`1.InternalReset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances.LeftBufferSizeGet">
            <summary>设置 CountSpliterReceiveFilter`1.get_LeftBufferSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances.NextReceiveFilterGet">
            <summary>设置 CountSpliterReceiveFilter`1.get_NextReceiveFilter() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances.OffsetDeltaGet">
            <summary>设置 CountSpliterReceiveFilter`1.get_OffsetDelta() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances.OffsetDeltaSetInt32">
            <summary>设置 CountSpliterReceiveFilter`1.set_OffsetDelta(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances.Reset">
            <summary>设置 CountSpliterReceiveFilter`1.Reset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances.StateGet">
            <summary>设置 CountSpliterReceiveFilter`1.get_State() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilter`1.AllInstances.StateSetFilterState">
            <summary>设置 CountSpliterReceiveFilter`1.set_State(FilterState value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilterFactory 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.#ctor(SuperSocket.Facility.Protocol.CountSpliterReceiveFilterFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{SuperSocket.SocketBase.Protocol.StringRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.ConstructorByteInt32">
            <summary>设置 CountSpliterReceiveFilterFactory.CountSpliterReceiveFilterFactory(Byte spliter, Int32 count) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.CreateFilterIAppServerIAppSessionIPEndPoint">
            <summary>设置 CountSpliterReceiveFilterFactory.CreateFilter(IAppServer appServer, IAppSession appSession, IPEndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory.AllInstances.CreateFilterIAppServerIAppSessionIPEndPoint">
            <summary>设置 CountSpliterReceiveFilterFactory.CreateFilter(IAppServer appServer, IAppSession appSession, IPEndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilterFactory`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1.#ctor(SuperSocket.Facility.Protocol.CountSpliterReceiveFilterFactory{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{SuperSocket.SocketBase.Protocol.StringRequestInfo})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1.Constructor">
            <summary>设置 CountSpliterReceiveFilterFactory`1.CountSpliterReceiveFilterFactory`1() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilterFactory`2 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.#ctor(SuperSocket.Facility.Protocol.CountSpliterReceiveFilterFactory{`0,`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilterFactory{`1})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.Constructor">
            <summary>设置 CountSpliterReceiveFilterFactory`2.CountSpliterReceiveFilterFactory`2() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.CreateFilterIAppServerIAppSessionIPEndPoint">
            <summary>设置 CountSpliterReceiveFilterFactory`2.CreateFilter(IAppServer appServer, IAppSession appSession, IPEndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimCountSpliterReceiveFilterFactory`2.AllInstances.CreateFilterIAppServerIAppSessionIPEndPoint">
            <summary>设置 CountSpliterReceiveFilterFactory`2.CreateFilter(IAppServer appServer, IAppSession appSession, IPEndPoint remoteEndPoint) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1">
            <summary>SuperSocket.Facility.Protocol.FixedHeaderReceiveFilter`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.#ctor(SuperSocket.Facility.Protocol.FixedHeaderReceiveFilter{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.Bind(SuperSocket.SocketBase.Protocol.IOffsetAdapter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilterInitializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilter{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.ConstructorInt32">
            <summary>设置 FixedHeaderReceiveFilter`1.FixedHeaderReceiveFilter`1(Int32 headerSize) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 FixedHeaderReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.ProcessMatchedRequestByteArrayInt32Int32Boolean">
            <summary>设置 FixedHeaderReceiveFilter`1.ProcessMatchedRequest(Byte[] buffer, Int32 offset, Int32 length, Boolean toBeCopied) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.Reset">
            <summary>设置 FixedHeaderReceiveFilter`1.Reset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.ResolveRequestInfoArraySegmentOfByteByteArray">
            <summary>设置 FixedHeaderReceiveFilter`1.ResolveRequestInfo(ArraySegment`1&lt;Byte&gt; header, Byte[] bodyBuffer) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.AllInstances.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 FixedHeaderReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.AllInstances.ProcessMatchedRequestByteArrayInt32Int32Boolean">
            <summary>设置 FixedHeaderReceiveFilter`1.ProcessMatchedRequest(Byte[] buffer, Int32 offset, Int32 length, Boolean toBeCopied) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.AllInstances.Reset">
            <summary>设置 FixedHeaderReceiveFilter`1.Reset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedHeaderReceiveFilter`1.AllInstances.ResolveRequestInfoArraySegmentOfByteByteArray">
            <summary>设置 FixedHeaderReceiveFilter`1.ResolveRequestInfo(ArraySegment`1&lt;Byte&gt; header, Byte[] bodyBuffer) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1">
            <summary>SuperSocket.Facility.Protocol.FixedSizeReceiveFilter`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.#ctor(SuperSocket.Facility.Protocol.FixedSizeReceiveFilter{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.Bind(SuperSocket.SocketBase.Protocol.IOffsetAdapter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilterInitializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilter{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.ConstructorInt32">
            <summary>设置 FixedSizeReceiveFilter`1.FixedSizeReceiveFilter`1(Int32 size) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 FixedSizeReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.InternalReset">
            <summary>设置 FixedSizeReceiveFilter`1.InternalReset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.LeftBufferSizeGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_LeftBufferSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.NextReceiveFilterGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_NextReceiveFilter() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.OffsetDeltaSuperSocketSocketBaseProtocolIOffsetAdapterget">
            <summary>设置 FixedSizeReceiveFilter`1.SuperSocket.SocketBase.Protocol.IOffsetAdapter.get_OffsetDelta() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.Reset">
            <summary>设置 FixedSizeReceiveFilter`1.Reset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.SizeGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_Size() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.StateGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_State() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.StateSetFilterState">
            <summary>设置 FixedSizeReceiveFilter`1.set_State(FilterState value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.StaticConstructor">
            <summary>设置 FixedSizeReceiveFilter`1.FixedSizeReceiveFilter`1() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.SuperSocketSocketBaseProtocolIReceiveFilterInitializerInitializeIAppServerIAppSession">
            <summary>设置 FixedSizeReceiveFilter`1.SuperSocket.SocketBase.Protocol.IReceiveFilterInitializer.Initialize(IAppServer appServer, IAppSession session) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 FixedSizeReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.InternalReset">
            <summary>设置 FixedSizeReceiveFilter`1.InternalReset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.LeftBufferSizeGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_LeftBufferSize() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.NextReceiveFilterGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_NextReceiveFilter() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.OffsetDeltaSuperSocketSocketBaseProtocolIOffsetAdapterget">
            <summary>设置 FixedSizeReceiveFilter`1.SuperSocket.SocketBase.Protocol.IOffsetAdapter.get_OffsetDelta() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.Reset">
            <summary>设置 FixedSizeReceiveFilter`1.Reset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.SizeGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_Size() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.StateGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_State() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.StateSetFilterState">
            <summary>设置 FixedSizeReceiveFilter`1.set_State(FilterState value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimFixedSizeReceiveFilter`1.AllInstances.SuperSocketSocketBaseProtocolIReceiveFilterInitializerInitializeIAppServerIAppSession">
            <summary>设置 FixedSizeReceiveFilter`1.SuperSocket.SocketBase.Protocol.IReceiveFilterInitializer.Initialize(IAppServer appServer, IAppSession session) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1">
            <summary>SuperSocket.Facility.Protocol.HttpReceiveFilterBase`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.#ctor(SuperSocket.Facility.Protocol.HttpReceiveFilterBase{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.Bind(SuperSocket.SocketBase.Protocol.IOffsetAdapter)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilterInitializer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.Bind(SuperSocket.SocketBase.Protocol.IReceiveFilter{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.Constructor">
            <summary>设置 HttpReceiveFilterBase`1.HttpReceiveFilterBase`1() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 HttpReceiveFilterBase`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.FilterRequestHeaderNameValueCollection">
            <summary>设置 HttpReceiveFilterBase`1.FilterRequestHeader(NameValueCollection header) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.HeaderItemsGet">
            <summary>设置 HttpReceiveFilterBase`1.get_HeaderItems() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.HeaderItemsSetNameValueCollection">
            <summary>设置 HttpReceiveFilterBase`1.set_HeaderItems(NameValueCollection value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.ProcessMatchedRequestByteArrayInt32Int32">
            <summary>设置 HttpReceiveFilterBase`1.ProcessMatchedRequest(Byte[] data, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.Reset">
            <summary>设置 HttpReceiveFilterBase`1.Reset() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.StaticConstructor">
            <summary>设置 HttpReceiveFilterBase`1.HttpReceiveFilterBase`1() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.AllInstances.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 HttpReceiveFilterBase`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.AllInstances.FilterRequestHeaderNameValueCollection">
            <summary>设置 HttpReceiveFilterBase`1.FilterRequestHeader(NameValueCollection header) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.AllInstances.HeaderItemsGet">
            <summary>设置 HttpReceiveFilterBase`1.get_HeaderItems() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.AllInstances.HeaderItemsSetNameValueCollection">
            <summary>设置 HttpReceiveFilterBase`1.set_HeaderItems(NameValueCollection value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.AllInstances.ProcessMatchedRequestByteArrayInt32Int32">
            <summary>设置 HttpReceiveFilterBase`1.ProcessMatchedRequest(Byte[] data, Int32 offset, Int32 length) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpReceiveFilterBase`1.AllInstances.Reset">
            <summary>设置 HttpReceiveFilterBase`1.Reset() 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase">
            <summary>SuperSocket.Facility.Protocol.HttpRequestInfoBase 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.#ctor(SuperSocket.Facility.Protocol.HttpRequestInfoBase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.Bind(SuperSocket.Facility.Protocol.IHttpRequestInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.Bind(SuperSocket.SocketBase.Protocol.IRequestInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.ConstructorStringNameValueCollection">
            <summary>设置 HttpRequestInfoBase.HttpRequestInfoBase(String key, NameValueCollection header) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.HeaderGet">
            <summary>设置 HttpRequestInfoBase.get_Header() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.HeaderSetNameValueCollection">
            <summary>设置 HttpRequestInfoBase.set_Header(NameValueCollection value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.KeyGet">
            <summary>设置 HttpRequestInfoBase.get_Key() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.KeySetString">
            <summary>设置 HttpRequestInfoBase.set_Key(String value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.AllInstances.HeaderGet">
            <summary>设置 HttpRequestInfoBase.get_Header() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.AllInstances.HeaderSetNameValueCollection">
            <summary>设置 HttpRequestInfoBase.set_Header(NameValueCollection value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.AllInstances.KeyGet">
            <summary>设置 HttpRequestInfoBase.get_Key() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase.AllInstances.KeySetString">
            <summary>设置 HttpRequestInfoBase.set_Key(String value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1">
            <summary>SuperSocket.Facility.Protocol.HttpRequestInfoBase`1 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.#ctor(SuperSocket.Facility.Protocol.HttpRequestInfoBase{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.Bind(SuperSocket.Facility.Protocol.IHttpRequestInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.Bind(SuperSocket.SocketBase.Protocol.IRequestInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.BodyGet">
            <summary>设置 HttpRequestInfoBase`1.get_Body() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.BodySetT0">
            <summary>设置 HttpRequestInfoBase`1.set_Body(!0 value) 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.ConstructorStringNameValueCollectionT0">
            <summary>设置 HttpRequestInfoBase`1.HttpRequestInfoBase`1(String key, NameValueCollection header, !0 body) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.AllInstances.BodyGet">
            <summary>设置 HttpRequestInfoBase`1.get_Body() 的 填充码</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimHttpRequestInfoBase`1.AllInstances.BodySetT0">
            <summary>设置 HttpRequestInfoBase`1.set_Body(!0 value) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.ShimMimeHeaderHelper">
            <summary>SuperSocket.Facility.Protocol.MimeHeaderHelper 的填充码类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimMimeHeaderHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimMimeHeaderHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.ShimMimeHeaderHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimMimeHeaderHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.ShimMimeHeaderHelper.ParseHttpHeaderStringNameValueCollection">
            <summary>设置 MimeHeaderHelper.ParseHttpHeader(String headerData, NameValueCollection header) 的 填充码</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1">
            <summary>SuperSocket.Facility.Protocol.BeginEndMarkReceiveFilter`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.#ctor(System.Byte[],System.Byte[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.Filter(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>设置 BeginEndMarkReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 BeginEndMarkReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.InitializeStub">
            <summary>初始化 type StubBeginEndMarkReceiveFilter 的新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.ProcessMatchedRequest(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 BeginEndMarkReceiveFilter`1.ProcessMatchedRequest(Byte[] readBuffer, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.ProcessMatchedRequestByteArrayInt32Int32">
            <summary>设置 BeginEndMarkReceiveFilter`1.ProcessMatchedRequest(Byte[] readBuffer, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.Reset">
            <summary>设置 BeginEndMarkReceiveFilter`1.Reset() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.Reset01">
            <summary>设置 BeginEndMarkReceiveFilter`1.Reset() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubBeginEndMarkReceiveFilter`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilter 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter.#ctor(System.Byte,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter.#ctor(System.Byte,System.Int32,System.Text.Encoding)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter.#ctor(System.Byte,System.Int32,System.Text.Encoding,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter.InitializeStub">
            <summary>初始化 type StubCountSpliterReceiveFilter 的新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter.ProcessMatchedRequest(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 CountSpliterReceiveFilter.ProcessMatchedRequest(Byte[] readBuffer, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter.ProcessMatchedRequestByteArrayInt32Int32">
            <summary>设置 CountSpliterReceiveFilter.ProcessMatchedRequest(Byte[] readBuffer, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter`1">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilter`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter`1.#ctor(System.Byte,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter`1.InitializeStub">
            <summary>初始化 type StubCountSpliterReceiveFilter 的新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter`1.ProcessMatchedRequest(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 CountSpliterReceiveFilter`1.ProcessMatchedRequest(Byte[] readBuffer, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter`1.ProcessMatchedRequestByteArrayInt32Int32">
            <summary>设置 CountSpliterReceiveFilter`1.ProcessMatchedRequest(Byte[] readBuffer, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilter`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilterFactory 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory.#ctor(System.Byte,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory.InitializeStub">
            <summary>初始化 type StubCountSpliterReceiveFilterFactory 的新实例</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`1">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilterFactory`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`1.InitializeStub">
            <summary>初始化 type StubCountSpliterReceiveFilterFactory 的新实例</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`2">
            <summary>SuperSocket.Facility.Protocol.CountSpliterReceiveFilterFactory`2 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`2.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`2.InitializeStub">
            <summary>初始化 type StubCountSpliterReceiveFilterFactory 的新实例</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`2.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`2.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubCountSpliterReceiveFilterFactory`2.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1">
            <summary>SuperSocket.Facility.Protocol.FixedHeaderReceiveFilter`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.Filter(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>设置 FixedHeaderReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 FixedHeaderReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.GetBodyLengthFromHeader(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 FixedHeaderReceiveFilter`1.GetBodyLengthFromHeader(Byte[] header, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.GetBodyLengthFromHeaderByteArrayInt32Int32">
            <summary>设置 FixedHeaderReceiveFilter`1.GetBodyLengthFromHeader(Byte[] header, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.InitializeStub">
            <summary>初始化 type StubFixedHeaderReceiveFilter 的新实例</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.NextReceiveFilterGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_NextReceiveFilter() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.ProcessMatchedRequest(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>设置 FixedHeaderReceiveFilter`1.ProcessMatchedRequest(Byte[] buffer, Int32 offset, Int32 length, Boolean toBeCopied) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.ProcessMatchedRequestByteArrayInt32Int32Boolean">
            <summary>设置 FixedHeaderReceiveFilter`1.ProcessMatchedRequest(Byte[] buffer, Int32 offset, Int32 length, Boolean toBeCopied) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.Reset">
            <summary>设置 FixedHeaderReceiveFilter`1.Reset() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.Reset01">
            <summary>设置 FixedHeaderReceiveFilter`1.Reset() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.ResolveRequestInfo(System.ArraySegment{System.Byte},System.Byte[],System.Int32,System.Int32)">
            <summary>设置 FixedHeaderReceiveFilter`1.ResolveRequestInfo(ArraySegment`1&lt;Byte&gt; header, Byte[] bodyBuffer, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.ResolveRequestInfoArraySegmentOfByteByteArrayInt32Int32">
            <summary>设置 FixedHeaderReceiveFilter`1.ResolveRequestInfo(ArraySegment`1&lt;Byte&gt; header, Byte[] bodyBuffer, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubFixedHeaderReceiveFilter`1.NextReceiveFilter">
            <summary>设置 FixedSizeReceiveFilter`1.get_NextReceiveFilter() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1">
            <summary>SuperSocket.Facility.Protocol.FixedSizeReceiveFilter`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.Filter(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>设置 FixedSizeReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 FixedSizeReceiveFilter`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.InitializeStub">
            <summary>初始化 type StubFixedSizeReceiveFilter 的新实例</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.NextReceiveFilterGet">
            <summary>设置 FixedSizeReceiveFilter`1.get_NextReceiveFilter() 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.ProcessMatchedRequest(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>设置 FixedSizeReceiveFilter`1.ProcessMatchedRequest(Byte[] buffer, Int32 offset, Int32 length, Boolean toBeCopied) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.ProcessMatchedRequestByteArrayInt32Int32Boolean">
            <summary>设置 FixedSizeReceiveFilter`1.ProcessMatchedRequest(Byte[] buffer, Int32 offset, Int32 length, Boolean toBeCopied) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.Reset">
            <summary>设置 FixedSizeReceiveFilter`1.Reset() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.Reset01">
            <summary>设置 FixedSizeReceiveFilter`1.Reset() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubFixedSizeReceiveFilter`1.NextReceiveFilter">
            <summary>设置 FixedSizeReceiveFilter`1.get_NextReceiveFilter() 的 stub</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1">
            <summary>SuperSocket.Facility.Protocol.HttpReceiveFilterBase`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.Filter(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>设置 HttpReceiveFilterBase`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.FilterByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 HttpReceiveFilterBase`1.Filter(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.FilterRequestBody(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>设置 HttpReceiveFilterBase`1.FilterRequestBody(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.FilterRequestBodyByteArrayInt32Int32BooleanInt32Out">
            <summary>设置 HttpReceiveFilterBase`1.FilterRequestBody(Byte[] readBuffer, Int32 offset, Int32 length, Boolean toBeCopied, Int32&amp; rest) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.FilterRequestHeader(System.Collections.Specialized.NameValueCollection)">
            <summary>设置 HttpReceiveFilterBase`1.FilterRequestHeader(NameValueCollection header) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.FilterRequestHeaderNameValueCollection">
            <summary>设置 HttpReceiveFilterBase`1.FilterRequestHeader(NameValueCollection header) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.InitializeStub">
            <summary>初始化 type StubHttpReceiveFilterBase 的新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.ProcessMatchedRequest(System.Byte[],System.Int32,System.Int32)">
            <summary>设置 HttpReceiveFilterBase`1.ProcessMatchedRequest(Byte[] data, Int32 offset, Int32 length) 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.ProcessMatchedRequestByteArrayInt32Int32">
            <summary>设置 HttpReceiveFilterBase`1.ProcessMatchedRequest(Byte[] data, Int32 offset, Int32 length) 的 stub</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.Reset">
            <summary>设置 HttpReceiveFilterBase`1.Reset() 的 存根</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.Reset01">
            <summary>设置 HttpReceiveFilterBase`1.Reset() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubHttpReceiveFilterBase`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase">
            <summary>SuperSocket.Facility.Protocol.HttpRequestInfoBase 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase.InitializeStub">
            <summary>初始化 type StubHttpRequestInfoBase 的新实例</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase`1">
            <summary>SuperSocket.Facility.Protocol.HttpRequestInfoBase`1 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase`1.#ctor(System.String,System.Collections.Specialized.NameValueCollection,`0)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase`1.InitializeStub">
            <summary>初始化 type StubHttpRequestInfoBase 的新实例</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubHttpRequestInfoBase`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:SuperSocket.Facility.Protocol.Fakes.StubIHttpRequestInfo">
            <summary>SuperSocket.Facility.Protocol.IHttpRequestInfo 的存根类型</summary>
        </member>
        <member name="M:SuperSocket.Facility.Protocol.Fakes.StubIHttpRequestInfo.#ctor">
            <summary>初始化 type StubIHttpRequestInfo 的新实例</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubIHttpRequestInfo.HeaderGet">
            <summary>设置 IHttpRequestInfo.get_Header() 的 stub</summary>
        </member>
        <member name="F:SuperSocket.Facility.Protocol.Fakes.StubIHttpRequestInfo.KeyGet">
            <summary>设置 IRequestInfo.get_Key() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubIHttpRequestInfo.ssf::SuperSocket#Facility#Protocol#IHttpRequestInfo#Header">
            <summary>设置 IHttpRequestInfo.get_Header() 的 stub</summary>
        </member>
        <member name="P:SuperSocket.Facility.Protocol.Fakes.StubIHttpRequestInfo.sssb::SuperSocket#SocketBase#Protocol#IRequestInfo#Key">
            <summary>设置 IRequestInfo.get_Key() 的 stub</summary>
        </member>
    </members>
</doc>
